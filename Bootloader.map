
Memory Configuration

Name             Origin             Length             Attributes
FLASH_MAIN       0x0000000000000000 0x0000000000040000 xr
FLASH_INFO       0x0000000000200000 0x0000000000004000 xr
SRAM_CODE        0x0000000001000000 0x0000000000010000 xrw
SRAM_DATA        0x0000000020000000 0x0000000000010000 rw
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD obj/bootloader.o
LOAD obj/Interrupts.o
START GROUP
LOAD /usr/bin/../lib/gcc/arm-none-eabi/6.3.1/thumb/v7e-m/fpv4-sp/hard/libgcc.a
LOAD /usr/bin/../lib/gcc/arm-none-eabi/6.3.1/../../../../arm-none-eabi/lib/thumb/v7e-m/fpv4-sp/hard/libc.a
END GROUP
                0x0000000000000144                INTERRUPT_VECTOR_SIZE = 0x144
                0x0000000000000ebc                BOOTLOADER_SIZE = (0x1000 - INTERRUPT_VECTOR_SIZE)
                0x0000000000000800                STACK_SIZE = 0x800
TARGET(elf32-littlearm)

.interupt_vectors
                0x0000000000000000      0x144
 *(.interrupt_vectors)
 .interupt_vectors
                0x0000000000000000      0x144 obj/Interrupts.o
                0x0000000000000000                akpfnInterruptVector

.bootloader     0x0000000000000144       0x9c
 *(.bootloader)
 .bootloader    0x0000000000000144       0x90 obj/bootloader.o
                0x0000000000000144                main
 *fill*         0x00000000000001d4        0x4 
 .bootloader.__stub
                0x00000000000001d8        0x8 linker stubs
                0x00000000000001e0                SRAM_CODE_LOAD_ADDRESS = ABSOLUTE (.)
                0x00000000000004e4                . = (. + SIZEOF (.sram_code))
                0x00000000000004e4                BOOTLOADER_END_ADDRESS = ABSOLUTE (.)

.startup_code   0x0000000000001000        0x0
                0x0000000000001001                STARTUP_CODE_JUMP_ADDRESS = (ABSOLUTE (.) | 0x1)

.sram_code      0x0000000001000000      0x304 load address 0x00000000000001e0
                0x0000000001000000                SRAM_CODE_START = ABSOLUTE (.)
 *(.sram_code)
 .sram_code     0x0000000001000000      0x304 obj/bootloader.o
                0x0000000001000000                AsciiToHex
                0x0000000001000020                FlashProgram
                0x00000000010000a0                ProcessBuffer
                0x00000000010001cc                ProgrammingLoop
                0x0000000001000304                SRAM_CODE_END = ABSOLUTE (.)

.glue_7         0x0000000001000304        0x0 load address 0x00000000000004e4
 .glue_7        0x0000000001000304        0x0 linker stubs

.glue_7t        0x0000000001000304        0x0 load address 0x00000000000004e4
 .glue_7t       0x0000000001000304        0x0 linker stubs

.vfp11_veneer   0x0000000001000304        0x0 load address 0x00000000000004e4
 .vfp11_veneer  0x0000000001000304        0x0 linker stubs

.v4_bx          0x0000000001000304        0x0 load address 0x00000000000004e4
 .v4_bx         0x0000000001000304        0x0 linker stubs

.text           0x0000000001000304        0x0 load address 0x00000000000004e4
 .text          0x0000000001000304        0x0 obj/bootloader.o
 .text          0x0000000001000304        0x0 obj/Interrupts.o

.iplt           0x0000000001000304        0x0 load address 0x00000000000004e4
 .iplt          0x0000000001000304        0x0 obj/bootloader.o

.rel.dyn        0x0000000001000304        0x0 load address 0x00000000000004e4
 .rel.iplt      0x0000000001000304        0x0 obj/bootloader.o

.data           0x0000000001000304        0x0 load address 0x00000000000004e4
 .data          0x0000000001000304        0x0 obj/bootloader.o
 .data          0x0000000001000304        0x0 obj/Interrupts.o

.igot.plt       0x0000000001000304        0x0 load address 0x00000000000004e4
 .igot.plt      0x0000000001000304        0x0 obj/bootloader.o

.stack          0x0000000020000000      0x7ff
                0x0000000020000000                STACK_END = ABSOLUTE (.)
                0x00000000200007ff                . = (. + (STACK_SIZE - 0x1))
 *fill*         0x0000000020000000      0x7ff 
                0x00000000200007ff                STACK_BEGIN = ABSOLUTE (.)

.bss            0x0000000020000800        0x2
                0x0000000020000800                ZERO_INIT_BEGIN = ABSOLUTE (.)
 *(.bss)
 .bss           0x0000000020000800        0x2 obj/bootloader.o
 .bss           0x0000000020000802        0x0 obj/Interrupts.o
 *(COMMON)
                0x0000000020000802                ZERO_INIT_END = ABSOLUTE (.)
OUTPUT(Bootloader.out elf32-littlearm)

.comment        0x0000000000000000       0x7f
 .comment       0x0000000000000000       0x7f obj/bootloader.o
                                         0x80 (size before relaxing)
 .comment       0x000000000000007f       0x80 obj/Interrupts.o

.ARM.attributes
                0x0000000000000000       0x34
 .ARM.attributes
                0x0000000000000000       0x34 obj/bootloader.o
 .ARM.attributes
                0x0000000000000034       0x34 obj/Interrupts.o
